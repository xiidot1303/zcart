<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.14  |
    |              on 2023-10-02 21:21:44              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
/*
* Copyright (C) Incevio Systems, Inc - All Rights Reserved
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential
* Written by Munna Khan <help.zcart@gmail.com>, September 2018
*/
 namespace App\Http\Controllers\Installer\Helpers; use Exception; use Illuminate\Database\SQLiteConnection; use Illuminate\Support\Facades\Artisan; use Illuminate\Support\Facades\Config; use Illuminate\Support\Facades\DB; use Symfony\Component\Console\Output\BufferedOutput; class DatabaseManager { public function migrateAndSeed() { $outputLog = new BufferedOutput(); $this->sqlite($outputLog); return $this->migrate($outputLog); } private function migrate($outputLog) { try { Artisan::call("\x6d\151\147\x72\141\x74\x65", ["\55\x2d\x66\x6f\162\x63\x65" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\x72\162\x6f\x72", $outputLog); } return $this->seed($outputLog); } private function seed($outputLog) { try { Artisan::call("\144\x62\x3a\163\x65\x65\144", ["\55\x2d\x66\157\x72\143\x65" => true], $outputLog); Artisan::call("\151\x6e\x63\145\166\151\157\x3a\x67\145\x6e\x65\x72\x61\x74\x65\55\153\x65\x79", ["\x2d\55\146\x6f\162\143\145" => true], $outputLog); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\x72", $outputLog); } return $this->response(trans("\x69\x6e\x73\164\x61\154\x6c\145\x72\137\155\145\x73\x73\141\147\145\x73\x2e\x66\151\156\141\154\x2e\x66\x69\156\151\163\150\145\144"), "\163\x75\x63\143\145\163\163", $outputLog); } public function seedDemoData() { ini_set("\x6d\x61\170\137\x65\x78\x65\x63\165\x74\151\x6f\156\137\x74\x69\155\145", 1200); $outputLog = new BufferedOutput(); try { Artisan::call("\x69\156\x63\x65\166\x69\x6f\x3a\x64\145\155\157"); } catch (Exception $e) { return $this->response($e->getMessage(), "\145\162\162\x6f\x72", $outputLog); } return $this->response(trans("\151\x6e\x73\164\141\154\x6c\145\x72\137\x6d\x65\x73\163\141\x67\145\x73\x2e\146\x69\x6e\141\154\x2e\x66\151\156\x69\x73\150\x65\x64"), "\x73\165\143\143\145\x73\163", $outputLog); } private function response($message, $status, $outputLog) { return ["\163\x74\141\164\165\x73" => $status, "\155\x65\x73\x73\x61\x67\x65" => $message, "\x64\142\x4f\165\x74\x70\165\x74\x4c\157\x67" => $outputLog->fetch()]; } private function sqlite($outputLog) { if (!DB::connection() instanceof SQLiteConnection) { goto gTBJv; } $database = DB::connection()->getDatabaseName(); if (file_exists($database)) { goto j_XUz; } touch($database); DB::reconnect(Config::get("\x64\141\x74\141\x62\x61\163\x65\56\x64\145\146\x61\x75\154\x74")); j_XUz: $outputLog->write("\x55\163\x69\x6e\x67\x20\x53\161\x6c\114\151\x74\145\x20\x64\141\164\141\x62\141\163\145\x3a\x20" . $database, 1); gTBJv: } }
